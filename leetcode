# leetcode-node

<--------2021-04-06-------->
洗牌算法：
有一个大小为100的数组，里面的元素是1到100，怎样随机从里面选择50个数。
如果采用暴力算法，那么到后面选出来的随机数可能会在前面就已经出现过，使用set去重也会造成很大的时间复杂度开销。
洗牌算法的核心思想就是，对下标进行随机选择，按照顺序交换当前下标和随机下标里面的数字。
这样即使随机到曾经出现的数也不会造成什么本次操作失效。
上述方法每一位只能出现99个数，虽然概率相等但是不够随机。可以将对下标的随机范围包括自己，这样每个数出现在某一位上的概率都是1/100。

题目如下：
设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。

insert(val)：当元素 val 不存在时，向集合中插入该项。
remove(val)：元素 val 存在时，从集合中移除该项。
getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/insert-delete-getrandom-o1

核心办法：
通过hash函数完成元素值到下标的映射，这样在检索就可以通过hash映射在常数时间内找到对应值的索引，完成查找这一动作。
随机选取一个数可以直接对数组操作，通过随机下标的方式选出随机数。
在C++中，unordered_map采用STL标准库提供的hash函数进行map映射，该hash函数只适用于基本数据类型（包括string类型），
并不能使用在自定义结构体或者类上面。容器模板中还表明了相等比较规则，改规则仅支持可以使用==符号进行比较的数据类型。

unordered_map类型的初始化为：
std::unordered_map<std::int,std::int> M_map;

成员函数：
begin()和end()都是返回迭代器；
empty()，若容器为空，返回true；否则false；
size()，返回容器存有的键值对的个数；
可以通过value=map[key]直接通过key值访问value值；
find()，查找以key为键的键值对，如果找到返回迭代器；否则==end()；
insert()，插入新的键值对；emplace()，向容器添加新的键值对，效率比前者高;
erase()，删除指定键值对；
clear()，清空容器；
swap()，交换两个容器的键值对，保证容器的类型完全相同。

代码如下：

/** 执行用时：44 ms, 在所有 C++ 提交中击败了81.33%的用户
    内存消耗：22.1 MB, 在所有 C++ 提交中击败了52.10%的用户 */

    /** Initialize your data structure here. */
    RandomizedSet() {}
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(mMap.find(val) == mMap.end()){
            mMap.emplace(val,mVec.size());
            mVec.push_back(val);
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(mMap.find(val) == mMap.end()){
            return false;
        }
        //可以直接删除映射值，将最后一个值赋给当前pos值，并且更新最后一个值的映射索引
        //原值可以不处理，因为需要删去，内容并不重要！
        int pos = mMap[val];
        //需要考虑本身就是最后一个值的情况
        mVec[pos] = mVec[mVec.size()-1];
        mMap[mVec[pos]] = pos;
        mVec.pop_back();
        mMap.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return mVec[rand()%mVec.size()];
    }

    private:
      unordered_map<int,int> mMap;
      vector<int> mVec;
      
      
      
      
<--------2021-04-07-------->

题目如下：
整数数组 nums 按升序排列，数组中的值互不相同 。
在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标从 0 开始计数）。例如，[0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。
给你旋转后的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array

非经典二分题：
二分题需要注意的细节是：必须能够跳出循环，一般判断在left<=right里面执行程序即可。
这道非经典二分与经典二分的差别是在判断有序数组部分需要注意边界条件的情况，或者说左右边界在转移的时候需要考虑是取mid，还是mid左右端点。
在这道题目里面如果将中点作为分割点，判断左边不包含mid元素的子数组是否有序，需要判断mid-1>=left是否成立，这里注意取等号，
因为很显然会分割出一个元素的情况。如果左边数组是有序数组，判断两端点是否能够包含target值，这时候nums[left]<=target<=nums[right]也需要取等号，
因为此前只判断了nums[mid]与target的大小情况，极端的看，也是出现一个元素时需要进行有效判断。如果左边子数组不是有序数组，
那么右边数组肯定是有序数组（有可能两边都是有序数组，这是mid正好是旋转点或者原数组尾的情况；但是我们可以保证肯定有一边是有序数组），
对右边数组进行上面相同操作，判断左右边界的转移情况。这种写法比包含mid的方法快，可能是转移过程剔除mid元素得到加速效果。

代码如下：

/** 执行用时：4 ms, 在所有 C++ 提交中击败了79.03%的用户
    内存消耗：10.8 MB, 在所有 C++ 提交中击败了59.32%的用户*/

    int left = 0;
    int right = nums.size()-1;

    while(left <= right){
        int mid = (left + right) / 2;
        //printf("%d,%d,%d,%d\n",left,mid,right,nums[mid]==target);
        //printf("%d,%d\n",target,nums[mid]);
        if(nums[mid] == target){
            return mid;
        } 
        if(nums[left] <= nums[mid]){
            if(nums[mid] >= target && nums[left] <= target){
                right = mid;
                //printf("1\n");
            }else{
                left = mid + 1;
                //printf("2\n");
            }
        }else{
            if(nums[mid] <= target && nums[right] >= target){
                left = mid;
                //printf("3\n");
            }else{
                right = mid - 1;
                //printf("4\n");
            }
        }
        //printf("%d,%d,%d\n",left,mid,right);
    }
    return -1;
    
    
<--------2021-04-11-------->

STL之set底层实现：
STL容器分为关联容器和顺序容器,关联容器的元素是按关键字来保存和访问的；与之相对的，顺序容器是按元素在容器中的位置进行保存和访问。
关联容器不支持关于位置的操作。顺序容器也无法中途插入一个元素值。

关联容器支持高效的关键字查找和访问。两个主要的关联容器是map和set。
map中的元素是（key-value)对，关键字起到索引的作用，值保存相关的数据。
有序：
set中的元素只包含关键字，容器内的元素不会重复，set支持高效的关键字查询操作——检查一个给定关键字是否存在set中。
multiset中的关键字可以重复出现。
无序：
unordered_set是底层使用hash组织的set，容器内部不进行排序。
set内的值不能直接被改变，底层采用高效的平衡二叉树实现：红黑树。可以在O(logn)的时间复杂度下完成查找、插入、删除。

题目如下：
给你一个整数 n ，请你找出并返回第 n 个 丑数 。
丑数 就是只包含质因数 2、3 和/或 5 的正整数。
(1被认为是丑数)

核心思想：
用之前的丑数乘上2、3、5生成的数一定是丑数。虽然生成的顺序不是按大小顺序出现，但是插入set中之后访问到的顺序一定是按大小顺序的。
例如对于丑数丑数12而言，当访问到它的时候10一定已经被插入到set中，因为后续的数无法生成10，但是使用小丑数生成大丑数的方法是能够覆盖全集的，
这里使用set是因为在是在生成的过程中可能会出现重复的部分，使用set可以高效去重。

代码如下：
/**执行用时：140 ms, 在所有 C++ 提交中击败了17.16%的用户
   内存消耗：28.9 MB, 在所有 C++ 提交中击败了12.56%的用户*/
   
   int nthUglyNumber(int n) {
        St.insert(1);
        int cnt = 1;
        auto i = St.begin();
        for(; i != St.end(); ++i){
            if(cnt == n) break;
            St.insert(2*(*i));
            St.insert(3*(*i));
            St.insert(5*(*i));
            ++cnt;
        }
        
        return *i;
    }

    private:
       set<double> St;
       
       
<--------2021-04-13-------->

重写sort函数中的cmp函数，为自定义结构体返回比较规则。

题目如下：
给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。
注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。

核心思想：
比较的传递性是这道题最重要的部分，这样就无需把全排列情况进行比较。这里还要思考一下。

代码如下：
/**执行用时：4 ms, 在所有 C++ 提交中击败了98.51%的用户
   内存消耗：10.7 MB, 在所有 C++ 提交中击败了89.68%的用户*/
   
   static bool cmp(const int &a,const int &b){
        long baseA = 1;
        long baseB = 1;
        int sa = a;
        int sb = b;
        if(sa == 0) baseA = 10;
        while(sa > 0){
            baseA *= 10;
            sa /= 10;
        }
        if(sb == 0) baseB = 10;
        while(sb > 0){
            baseB *= 10;
            sb /= 10;
        }
        return a*baseB+b>b*baseA+a;
    }

    string largestNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end(),cmp);
        /**for(int i=0;i<nums.size();++i){
            printf("%d\n",nums[i]);
        }*/

        //这一步最绝！！！
        if(nums[0] == 0) return "0";

        string res;
        for(int i=0;i<nums.size();++i){
            res += to_string(nums[i]);
        }
        return res;
    }
    
 
 
<--------2021-04-14-------->

二维简单DP题

题目如下：
给你一个字符串 s，找到 s 中最长的回文子串。

核心思想：
回文串的基本性质是它是轴对称的，基于中点两端的字母相同。如果考虑顺序便利的字符串判断复杂度会很高，并且过程中没有可以减少操作的好方法。
考虑dp是因为回文串存在天然的转移规则，比如之前已经找到一个长度为2的回文串时，如果该串的左右两个字母相同，那么我们就获得一个长度为4的回文串。
转移过程为：if(s[x] == s[y] && s[(x+1)...(y-1)]为回文串) s[x...y]为回文串。
因为在转移过程中，长串由短串得到，所以我们对长度进行升序遍历。
考虑特殊case，当长度为1时，该子串自然而然是回文串；长度为2的时候如果两字母相等，该子串是回文串。
在dp的过程中，通过left和lenmax不断更新最长串状态。
在实现过程中对flag数组初始化长度为1和2的标志时，同时记得更新最长串起始点和长度。编程时因为忘记长度为2的回文串更新出错。
dp的时候还要确定区间的左右端点全覆盖，因为是对长度进行dp，长度变量l最后需要等于len，才能遍历所有情况。
最后string的截取子串函数参数如下substr(start,len)。

代码如下：
/**执行用时：264 ms, 在所有 C++ 提交中击败了52.27%的用户
   内存消耗：11.4 MB, 在所有 C++ 提交中击败了67.45%的用户*/
   
   string longestPalindrome(string s) {
        int len = s.size();
        //printf("%d\n",len);

        int lenmax = 1;
        int left = 0;

        for(int i=0;i<len;++i)
            flag[i][i] = 1;

        for(int i=0;i<len-1;++i){
            if(s[i] == s[i+1]){
                flag[i][i+1] = 1;
                lenmax = 2;
                left = i;
            }
        }

        for(int l=3;l<=len;++l){
            int y= len-l;
            for(int x=0;x<=y;++x){
                if(flag[x+1][x+l-2]){
                    if(s[x]==s[x+l-1]){
                        flag[x][x+l-1]=1;
                        if(l>lenmax){
                            lenmax = l;
                            left = x;
                        }
                    }
                }
            }
        }
        
        return s.substr(left,lenmax);

    }

    private:
      int flag[1005][1005];
      
      
<--------2021-04-20-------->

最大子区间和

题目如下：
输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
要求时间复杂度为O(n)。

核心思想：
这是一道简单题，但是错了两次，必须说边界条件一定要思考好！
第一次错误的原因是最大值赋值为0，如果遇到全部是负数的整数数组就会出现错误，因为最大值会一直保持0，但是负数数组最大值却是最小负数。
第二次错误的原因sum增加的地方和判断最大值的地方反了，这么说的原因是，当我们的sum变化的时候，需要判断最大值是否发现变化，如果位置不对，最后一个区间和就不会进行判断，导致错误。
第二个错误实在不应该！

代码如下：
/**执行用时：24 ms, 在所有 C++ 提交中击败了67.93%的用户
   内存消耗：22.4 MB, 在所有 C++ 提交中击败了67.60%的用户*/
   
   int maxSubArray(vector<int>& nums) {
        int sum = 0;
        int mx = -200;
        for(int i=0;i<nums.size();++i){
            if(sum < 0) sum = 0;
            sum += nums[i];
            if(mx < sum) mx = sum;
        }
        return mx;
    }
    

数组中出现超过半数的数字：摩尔投票

题目如下：
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
你可以假设数组是非空的，并且给定的数组总是存在多数元素。

核心思想：
这是一道简单题，第一反应使用c++的unordered_map完成出现数字的计数，unordered_map的底层实现是采用STL的hash函数实现key-value的映射，所以查找时间成本较低。
该方法的空间复杂度和时间复杂度都是O(n)，并不是最优解。
官方给出的题解是采用摩尔投票法。该方法成立的前提是数组内仅有一个数字符合出现一半的要求。
写完之后觉得上一句话是句废话(笑.jpg)
出现次数超过一半的元素理所应当有且仅有一个。
那么接下来的问题就是如何找出这个唯一的特殊数字。
摩尔投票法的思想是，全局维护一个投票值，如果遇到特殊数字票数+1，如果遇到其他值票数-1，完成整个数组的遍历之后投票值的结果是>=0的。
但是前提我们并不知道特殊数字的值是多少，让我们思考投票值为0的时候，已经遍历的数组会是什么情况？
如果投票的参考元素等于特殊数字，那么会消耗与非特殊值相等的数量；如果投票的参考元素不等于特殊数字，那么会消耗[0,与非特殊值相等的数量]范围内的数量。
也就是说在后续的区间内采用摩尔投票特殊值的投票依然会>=0。
那么会不会出现选取不到特殊值的情况的？
如果等于的话会有可能，例如[1,3,2,3];但是超过不会出现这种情况，因为总有一个特殊数字会让前面的非特殊数字的投票值变为0。


代码如下：
/**执行用时：44 ms, 在所有 C++ 提交中击败了7.08%的用户
   内存消耗：18.4 MB, 在所有 C++ 提交中击败了16.96%的用户*/
   
   int res = 0;
        for(int i=0;i<nums.size();++i){
            if(mMap.find(nums[i])==mMap.end()){
                mMap[nums[i]] = 0;
            }
            int cnt = mMap[nums[i]];
            mMap[nums[i]] = cnt + 1;
            if(cnt + 1 > nums.size()/2){
                res = nums[i];
                break;
            }
        }
        return res;
    }
    
    unordered_map<int,int> mMap;
    
 




